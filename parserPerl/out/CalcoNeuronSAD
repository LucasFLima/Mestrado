module calconeuronsad {

	path = "xxx";

	entity VistaMapaPostRequest {
		ConfigMapa : config;
	};

	entity CalcoGetResponse {
		string : nomePio;
		string : idPio;
		string : ordem;
	};

	entity OrganizacaoMilitar {
		string : nome;   /*Required.*/
		string : id;   /*Required.*/
	};

	entity PiosRequest {
		[string] : pios;   /*Required.*/
	};

	entity AssocVistaMapasGetResponse {
		AssocMapaVistaResponse : mapas;   /*Required.*/
	};

	entity Anotacao {
		string : nome;
		string : codigoCorTexto;
		string : idPio;
		string : terminacao;
		Localizacao : localizacao;   /*Required.*/
		string : largura;
		string : texto;
		string : idAnotacao;
		string : fonte;
		string : codigoCorArea;
	};

	entity ItemPolling {
		string : nome;
		string : codigoCategoria;
		boolean : removido;
		string : idPio;
		boolean : ordemBatalha;
		string : largura;
		string : idItemPai;
		boolean : alvo;
		string : codigoCategoriaTipo;
		string : nomeTipo;
		boolean : showMenu;
		string : codigoHostilidade;
		Localizacao : localizacao;
		string : corHostilidade;
		string : idTipo;
		string : idItem;
		string : icon;
		[ItemPolling] : subordinados;
		boolean : novo;
	};

	entity AssociacaoAtualizar {
		String : ordem;   /*Required.*/
	};

	entity VistasResponse {
		[PioPolling] : pios;
		[VistaPolling] : vistas;
	};

	entity AssociacaoPioCalco {
		string : descricao;
		boolean : associado;
		string : idPio;
		string : idClassificacaoSeguranca;
		string : codigoCategoria;
		string : nome;
	};

	entity AssocVistaMapaPutRequest {
		string : shpTransparenciaLinha;
		string : shpEspessLinha;
		string : shpCorPreenchimento;
		string : shpCorLinha;
		string : transparencia;
		string : shpTransparenciaPreenchimento;
	};

	entity Ponto {
		double : longitude;
		double : latitude;
		double : altitude;
	};

	entity ItemRamo {
		[ItemRamo] : children;
		string : codigoCategoria;
		string : text;
		string : id;
	};

	entity DadosDaVista {
		string : nomeVista;   /*Required.*/
		string : idClassificacaoSeguranca;   /*Required.*/
	};

	entity AprovarPiosRequest {
		[string] : pios;
	};

	entity Instancia {
		[string] : pios;
		string : idGlobalNo;   /*Required.*/
		string : nomeNo;   /*Required.*/
	};

	entity Vista {
		[Pio] : pios;
		string : codigoCategoria;
		string : id;
		[AssocMapaVistaResponse] : mapas;
		string : nomeVista;
	};

	entity PiosRemotosResponse {
		[Instancia] : nos;
	};

	entity Area {
		[Ponto] : pontos;
	};

	entity PioAprovacao {
		long : dataAprovacao;
		string : idPio;
		boolean : remoto;
		string : nomePio;
	};

	entity DadosDoPio {
		string : textoDescricao;
		string : nomePio;
		string : idClassificacaoSeguranca;
		string : codigoCategoria;
	};

	entity AssocVistaMapasPutRequest {
		[CamadaWms] : camadasWms;
		string : idMapa;   /*Required.*/
	};

	entity PollingResponse {
		string : dtUltimaAtualizacao;
		[PioPolling] : pios;
	};

	entity AprovarPiosResponse {
		boolean : result;
	};

	entity VistaPolling {
		[string] : pios;
		string : codigoCategoria;
		string : id;
		string : nomeVista;
		[AssocMapaVistaResponse] : mapas;
	};

	entity ItemAlvo {
		string : icon;
		string : nome;
		string : prioridade;
		string : idItem;
	};

	entity AssociacaoItem {
		string : idItemSubj;
		string : idItemObj;
		string : nomeItemSubj;
		string : codigoCategoria;
		string : nomeItemObj;
		string : iconAssociacao;
		string : idAssociacao;
	};

	entity PioMetadado {
		boolean : remoto;   /*Required.*/
		string : instancia;
		boolean : arquivado;   /*Required.*/
	};

	entity DadosPioPropriedades {
		[Item] : materiais;
		string : ordem;
		string : idPio;
		[DadosPioPropriedades] : pios;
		string : nomePio;
		[Item] : pessoas;
		[Item] : anotacoes;
		[Item] : instalacoes;
		PioMetadado : metadado;
		[Item] : mccs;
		[Item] : organizacoes;
	};

	entity VistaMapaPostResponse {
		ConfigMapa : configMapa;
		string : referencia;
		string : url;
		string : tipoAcesso;
		string : tipoMapa;
		string : idMapa;
		string : nome;
	};

	entity Pio {
		string : transparencia;
		string : idGlobal;
		string : nomePio;
		[Anotacao] : anotacoes;
		[Item] : itens;
		[Pio] : pios;
		string : idPio;
	};

	entity Linha {
		[Ponto] : pontos;
	};

	entity EventoPolling {
		[ItemEvento] : recursos;
		string : idEvento;
		[ItemEvento] : objetivos;
		Localizacao : localizacao;
		string : evolucao;
		string : nome;
	};

	entity PioArquivarPutRequest {
		boolean : arquivar;   /*Required.*/
	};

	entity ClassificacaoSeguranca {
		string : codigoNivel;
		string : idClassificacaoSeguranca;
	};

	entity Item {
		Hostilidade : hostilidade;
		string : sequencialAtualizacao;
		string : terminacao;
		[Item] : comandados;
		string : codigoCategoria;
		string : nome;
		boolean : isAlvo;
		string : nomeTipo;
		string : codigoCategoriaTipo;
		[AssociacaoItem] : associacoes;
		string : codigoCategoriaAssociacao;
		string : idItemPai;
		boolean : isOrdemBatalha;
		Localizacao : localizacao;
		boolean : isShowMenu;
		string : usuario;
		string : icon;
		string : idItem;
		string : idTipo;
	};

	entity VistaMapaGetResponse {
		string : tipoAcesso;
		string : tipoMapa;
		string : idMapa;
		string : nome;
		ConfigMapa : configMapa;
		string : url;
		string : referencia;
	};

	entity PioGetResponse {
		long : dtExecucao;
		boolean : realizouAssociacao;
		[DadosPioPropriedades] : pios;
	};

	entity DadosDoCalco {
		string : idVista;
		string : idPio;
		string : codigoCategoria;
	};

	entity VistaMapaPutRequest {
		ConfigMapa : config;
	};

	entity MapaVista {
		ConfigMapa : configMapa;
		string : referencia;
		string : idAssocMapa;
		string : tipoAcesso;
		string : tipoMapa;
		string : idMapa;
		string : nome;
	};

	entity ListaAlvos {
		string : nome;
		string : idListaAlvos;
		[ItemAlvo] : alvos;
	};

	entity AssociacaoPioCalcoPostRequest {
		string : idVista;
		string : idUsuario;
		[AssociacaoPioCalco] : listaPios;
	};

	entity MapaResponse {
		string : urlReferenciaMapa;   /*Required.*/
		string : codigoCategoria;
		string : nomeMapa;   /*Required.*/
		string : idMapa;   /*Required.*/
		string : referenciaMapa;   /*Required.*/
		string : idUsuario;   /*Required.*/
		string : wmsQueryParams;
		string : nomeOriginalMapa;
		string : idOrganizacaoRelatora;   /*Required.*/
		string : idTipoMapa;   /*Required.*/
		string : tipoMapa;   /*Required. Valores possiveis: SHAPE GTIFF WMS */
		string : localMapa;   /*Required.*/
	};

	entity ConfigMapa {
		string : wmsCrs;
		string : shpTransparenciaLinha;
		string : wmsLayer;
		string : shpCorPreenchimento;
		string : shpEspessLinha;
		string : shpTransparenciaPreenchimento;
		string : transparencia;
		string : shpCorLinha;
		string : wmsFormat;
		string : tipoCamada;
	};

	entity VistaGetResponse {
		long : dtExecucao;
		Vista : vistas;
	};

	entity PiosResponse {
		PioPolling : pio;
	};

	entity PioPolling {
		string : idGlobal;
		[ItemPolling] : materiais;
		string : idPioPai;
		string : codigoCategoria;
		[ItemPolling] : pessoas;
		boolean : raiz;
		string : idPio;
		[ListaAlvos] : listasAlvos;
		[EventoPolling] : eventos;
		boolean : novo;
		string : nomePio;
		[ItemPolling] : instalacoes;
		[Anotacao] : anotacoes;
		[string] : pios;
		[ItemPolling] : organizacoes;
		[ItemPolling] : mccs;
		boolean : arquivado;
	};

	entity CamadaWms {
		string : wmsFormat;   /*Required.*/
		string : tipoCamada;   /*Required.*/
		string : wmsCrs;   /*Required.*/
		string : wmsLayer;   /*Required.*/
	};

	entity PollingRequest {
		[string] : pios;
		string : dtUltimaAtualizacao;
		string : idPioSelecionado;
		string : menuAberto;
	};

	entity AssocMapaVistaResponse {
		string : wmsCrs;
		string : shpCorPreenchimento;
		string : shpEspessLinha;
		string : wmsLayer;
		string : shpTransparenciaLinha;
		string : shpTransparenciaPreenchimento;
		string : idMapa;   /*Required.*/
		string : idMapaAssoc;   /*Required.*/
		string : shpCorLinha;
		string : transparencia;   /*Required.*/
		MapaResponse : objMapa;   /*Required.*/
		string : idVista;   /*Required.*/
		string : wmsFormat;
		string : tipoCamada;
	};

	entity Radar {
		number : sic;   /*Required.*/
		number : sac;   /*Required.*/
	};

	entity Hostilidade {
		string : corHostilidade;
		string : idHostilidade;
		string : codigoHostilidade;
	};

	entity Localizacao {
		Linha : linha;
		Ponto : ponto;
		string : codigoCategoria;
		string : idLocalizacao;
		Area : area;
	};

	entity ItensVistaResponse {
		[Pio] : pios;
		long : dtExecucao;
	};

	entity ItemEvento {
		string : icon;
		string : nome;
		string : idItem;
	};

	entity ConsultarPiosAprovacaoResponse {
		[PioAprovacao] : pios;
	};

	entity PublicacaoResponse {
		string : idPio;
	};

	entity SubordinarPioPutRequest {
		string : idPioSubordinador;
		string : idPioSubordinado;
		string : idPioSubordinadorAntigo;
	};

	service <NomeServico> {
		path = "/pio/{idPio}/itens";

		/**
		* @ summary: Consulta os itens de um PIO
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idPio(*): 
		*	query idItemIgnorado: 
		*	query tipoConsulta: 
		*/
		@get array <NomeCapacidade> (string t, string idPio, string idItemIgnorado, string tipoConsulta);
	}

	service <NomeServico> {
		path = "/pio/{idPio}/organizacoesmilitares";

		/**
		* @ summary: Consulta as organizações militares e ordens de batalha de um PIO
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idPio(*): 
		*/
		@get array <NomeCapacidade> (string t, string idPio);
	}

	service <NomeServico> {
		path = "/calco/vistas/{idVista}/itens";

		/**
		* @ summary: Listar itens de uma vista.
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): Identificador da vista
		*	query categorias: 
		*	query unidades: 
		*	query dtLast: 
		*/
		@get ItensVistaResponse <NomeCapacidade> (string t, string idVista, array categorias, array unidades, long dtLast);
	}

	service <NomeServico> {
		path = "/vista/pio/{id}";

		/**
		* @ summary: Obtem o pio com o id referido
		* @ params: 
		*	query t(*): Token de autenticação
		*	path id(*): 
		*	query filtrarOrdemBatalha: Exibir ou não as ordens de batalha. default=false
		*		\--> Valores possiveis: true false 
		*/
		@get PlanoInformacaoOperacional <NomeCapacidade> (string t, number id, boolean filtrarOrdemBatalha);

		/**
		* @ summary: Atualiza um pio
		* @ params: 
		*	query t(*): Token de autenticação
		*	body dados_alterados(*): 
		*	path id(*): 
		*/
		@put DadosDoPio <NomeCapacidade> (string t, DadosDoPio dados_alterados, number id);

		/**
		* @ summary: Remover um pio
		* @ params: 
		*	query t(*): Token de autenticação
		*	path id(*): 
		*/
		@delete null <NomeCapacidade> (string t, number id);
	}

	service <NomeServico> {
		path = "/vista/pios";

		/**
		* @ summary: Obtem todos os pios
		* @ params: 
		*/
		@get PlanoInformacaoOperacionalGetResponse <NomeCapacidade> ();

		/**
		* @ summary: Cria um pio
		* @ params: 
		*	query t(*): Token de autenticação
		*	body dados: 
		*/
		@post PlanoInformacaoOperacionalPostResponse <NomeCapacidade> (string t, DadosDoPio dados);
	}

	service <NomeServico> {
		path = "/vistas/pios";

		/**
		* @ summary: Obtem todos os pios
		* @ params: 
		*	query t(*): Token de autenticação
		*/
		@get PlanoInformacaoOperacionalGetResponse <NomeCapacidade> (string t);
	}

	service <NomeServico> {
		path = "/vista/pios/menu";

		/**
		* @ summary: Obtem todos os pios e suas propriedades
		* @ params: 
		*	query t(*): Token de autenticação
		*	query tipoConsulta: 
		*	query dtLast: 
		*/
		@get PioGetResponse <NomeCapacidade> (string t, string tipoConsulta, long dtLast);
	}

	service <NomeServico> {
		path = "/vistas";

		/**
		* @ summary: Listar vistas
		* @ params: 
		*	query t(*): Token de autenticação
		*	query recuperarHierarquiaVistas(*): Recuperar hierarquia de pios das vistas
		*/
		@get VistasResponse <NomeCapacidade> (string t, string recuperarHierarquiaVistas);

		/**
		* @ summary: Cria uma nova vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	body DadosDaVista(*): 
		*/
		@post VistaResponse <NomeCapacidade> (string t, DadosDaVista DadosDaVista);
	}

	service <NomeServico> {
		path = "/pios/itens";

		/**
		* @ summary: Obter info do pio e seus itens
		* @ params: 
		*	query t(*): Token de autenticação
		*	body PiosRequest(*): 
		*/
		@post PiosResponse <NomeCapacidade> (string t, PiosRequest PiosRequest);
	}

	service <NomeServico> {
		path = "/piosPolling";

		/**
		* @ summary: Realizar o pooling de vistas e pios
		* @ params: 
		*	query t(*): Token de autenticação
		*	body PollingRequest(*): 
		*/
		@post PollingResponse <NomeCapacidade> (string t, PollingRequest PollingRequest);
	}

	service <NomeServico> {
		path = "/pios/aprovarPios";

		/**
		* @ summary: Realizar aprovação de pios
		* @ params: 
		*	query t(*): Token de autenticação
		*	body AprovarPiosRequest(*): 
		*/
		@post AprovarPiosResponse <NomeCapacidade> (string t, AprovarPiosRequest AprovarPiosRequest);
	}

	service <NomeServico> {
		path = "/pios/publicarPios";

		/**
		* @ summary: Realizar publicação de pios
		* @ params: 
		*	query t(*): Token de autenticação
		*	query idPio(*): 
		*	query idNo(*): 
		*/
		@post PublicacaoResponse <NomeCapacidade> (string t, string idPio, string idNo);
	}

	service <NomeServico> {
		path = "/pios/consultarPios";

		/**
		* @ summary: Consulta de pios para aprovação
		* @ params: 
		*	query t(*): Token de autenticação
		*/
		@get ConsultarPiosAprovacaoResponse <NomeCapacidade> (string t);
	}

	service <NomeServico> {
		path = "/vistas/{idVista}";

		/**
		* @ summary: Obtem vista com id referido
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*/
		@get Vista <NomeCapacidade> (string t, number idVista);

		/**
		* @ summary: Atualiza uma vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	body dados_alterados(*): 
		*	path idVista(*): 
		*/
		@put VistaPutResponse <NomeCapacidade> (string t, DadosDaVista dados_alterados, number idVista);

		/**
		* @ summary: Remover vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*/
		@delete VistaDeleteResponse <NomeCapacidade> (string t, string idVista);
	}

	service <NomeServico> {
		path = "/vista/calco";

		/**
		* @ summary: Cria um calco
		* @ params: 
		*	query t(*): Token de autenticação
		*	body dados_alterados(*): 
		*/
		@post CalcoPostResponse <NomeCapacidade> (string t, DadosDoCalco dados_alterados);
	}

	service <NomeServico> {
		path = "/vista/{id}/calco/pios";

		/**
		* @ summary: Lista dos PIOs associados ao calco
		* @ params: 
		*	query t(*): Token de autenticação
		*	path id(*): 
		*/
		@get array <NomeCapacidade> (string t, number id);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/calco/piosAssociacao";

		/**
		* @ summary: Lista dos PIOs associados ao calco
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*/
		@get array <NomeCapacidade> (string t, number idVista);

		/**
		* @ summary: Serviço de associação de PIOs à vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	body associacaoPioCalco(*): 
		*/
		@put  <NomeCapacidade> (string t, number idVista, AssociacaoPioCalcoPostRequest associacaoPioCalco);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/calco/pios/{idPio}";

		/**
		* @ summary: Remove uma relação entre pio e vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idPio(*): 
		*/
		@delete CalcoDeleteResponse <NomeCapacidade> (string t, number idVista, number idPio);

		/**
		* @ summary: Atualiza a ordenação dos pios em uma vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	body associacaoAtualizar(*): 
		*	path idVista(*): 
		*	path idPio(*): 
		*/
		@put CalcoPutResponse <NomeCapacidade> (string t, AssociacaoAtualizar associacaoAtualizar, String idVista, String idPio);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/referencia/{idReferencia}";

		/**
		* @ summary: Atualiza a ordenação de uma referência (camada) na vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	body associacaoAtualizar(*): 
		*	path idVista(*): 
		*	path idReferencia(*): 
		*/
		@put CalcoPutResponse <NomeCapacidade> (string t, AssociacaoAtualizar associacaoAtualizar, String idVista, String idReferencia);
	}

	service <NomeServico> {
		path = "/vista/pios/classificacaoSeguranca";

		/**
		* @ summary: Lista das classificações de seguranca
		* @ params: 
		*	query t(*): Token de autenticação
		*/
		@get array <NomeCapacidade> (string t);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/calco/pio/{idPio}/transparencia";

		/**
		* @ summary: Atualiza a transparencia de um Pio
		* @ params: 
		*	query t(*): Token de autenticação
		*	path transparencia(*): 
		*	path idVista(*): 
		*	path idPio(*): 
		*/
		@put TransparenciaPioRequest <NomeCapacidade> (string t, String transparencia, String idVista, String idPio);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/mapa/{idMapa}";

		/**
		* @ summary: Cadastra um mapa para uma vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idMapa(*): 
		*	body request: 
		*/
		@post VistaMapaPostResponse <NomeCapacidade> (string t, String idVista, String idMapa, VistaMapaPostRequest request);

		/**
		* @ summary: Atualiza configurações do mapa na vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idMapa(*): 
		*	body request: 
		*/
		@put  <NomeCapacidade> (string t, String idVista, String idMapa, VistaMapaPutRequest request);

		/**
		* @ summary: Exclui a associação do mapa a vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idMapa(*): 
		*/
		@delete  <NomeCapacidade> (string t, String idVista, String idMapa);

		/**
		* @ summary: Consulta mapa associado a uma vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idMapa(*): 
		*/
		@get VistaMapaGetResponse <NomeCapacidade> (string t, String idVista, String idMapa);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/mapasAssociacao";

		/**
		* @ summary: Retorna todos os Mapas associados a Vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*/
		@get AssocVistaMapasGetResponse <NomeCapacidade> (string t, String idVista);

		/**
		* @ summary: Atualiza as camadas WMS de um mesmo Mapa associadas a Vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	body infoLayersMapa(*): 
		*/
		@put  <NomeCapacidade> (string t, String idVista, AssocVistaMapasPutRequest infoLayersMapa);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/mapasAssociacao/{idMapaAssoc}";

		/**
		* @ summary: Retorna as informações de um Mapa associado a Vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idMapaAssoc(*): 
		*/
		@get AssocMapaVistaResponse <NomeCapacidade> (string t, string idVista, string idMapaAssoc);

		/**
		* @ summary: Atualiza as informações de um Mapa associado a Vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idMapaAssoc(*): 
		*	body infoAssoc(*): 
		*/
		@put AssocMapaVistaResponse <NomeCapacidade> (string t, String idVista, string idMapaAssoc, AssocVistaMapaPutRequest infoAssoc);

		/**
		* @ summary: Exclui a associação de um Mapa a Vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*	path idMapaAssoc(*): 
		*/
		@delete string <NomeCapacidade> (string t, String idVista, string idMapaAssoc);
	}

	service <NomeServico> {
		path = "/vista/{idVista}/calco/pios/categorias";

		/**
		* @ summary: Obtem as categorias de todos os itens da Vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path idVista(*): 
		*/
		@get CategoriasItensVistaResponse <NomeCapacidade> (string t, string idVista);
	}

	service <NomeServico> {
		path = "/pios/subordinar";

		/**
		* @ summary: Serviço de subordinacao de PIOs
		* @ params: 
		*	query t(*): Token de autenticação
		*	body subordinarPio(*): 
		*/
		@put  <NomeCapacidade> (string t, SubordinarPioPutRequest subordinarPio);
	}

	service <NomeServico> {
		path = "/pios";

		/**
		* @ summary: Lista de PIOs
		* @ params: 
		*	query t(*): Token de autenticação
		*	query status: Filtra a consulta de PIOs
		*	query metadado: Obtém os metadados de todos os PIOs.
		*/
		@get PioGetResponse <NomeCapacidade> (string t, string status, string metadado);
	}

	service <NomeServico> {
		path = "/pios/{id}";

		/**
		* @ summary: Serviços sobre PIO
		* @ params: 
		*	query t(*): Token de autenticação
		*	path id(*): ID do PIO
		*	body arquivarPio(*): Arquiva ou desarquiva o PIO especificado
		*/
		@put array <NomeCapacidade> (string t, string id, PioArquivarPutRequest arquivarPio);
	}

	service <NomeServico> {
		path = "/vista/{id}/radares";

		/**
		* @ summary: Consulta de radares associados a uma vista
		* @ params: 
		*	query t(*): Token de autenticação
		*	path id(*): ID da vista
		*/
		@get array <NomeCapacidade> (string t, string id);
	}

	service <NomeServico> {
		path = "/pios/piosRemotos";

		/**
		* @ summary: Lista de PIOs remotos por nó
		* @ params: 
		*	query t(*): Token de autenticação
		*/
		@get PiosRemotosResponse <NomeCapacidade> (string t);
	}


